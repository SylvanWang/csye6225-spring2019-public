{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Resources": {
    "wafrSQLiSet": {
      "Type": "AWS::WAFRegional::SqlInjectionMatchSet",
      "Properties": {
        "Name": "wafrSQLiSet",
        "SqlInjectionMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "wafrSQLiRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": "wafrSQLiRule",
        "Name": "wafrSQLiRule",
        "Predicates": [
          {
            "Type": "SqlInjectionMatch",
            "Negated": false,
            "DataId": {  "Ref" : "wafrSQLiSet" }
          }
        ]
      }
    },
    "wafrAuthTokenStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "wafrAuthTokenStringSet",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "example-session-id",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "authorization"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ",
            "TextTransformation": "URL_DECODE"
          }
        ]
      }
    },
    "wafrAuthTokenRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": "wafrAuthTokenRule",
        "Name": "wafrAuthTokenRule",
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": {  "Ref" : "wafrAuthTokenStringSet" }
          }
        ]
      }
    },
    "wafrXSSSet": {
      "Type": "AWS::WAFRegional::XssMatchSet",
      "Properties": {
        "Name": "wafrXSSSet",
        "XssMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "wafrXSSRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": "wafrXSSRule",
        "Name": "wafrXSSRule",
        "Predicates": [
          {
            "Type": "XssMatch",
            "Negated": false,
            "DataId": {  "Ref" : "wafrXSSSet" }
          }
        ]
      }
    },
    "wafrPathsStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "wafrPathsStringSet",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "wafrPathsRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": "wafrPathsRule",
        "Name": "wafrPathsRule",
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": {  "Ref" : "wafrPathsStringSet" }
          }
        ]
      }
    },
    "wafrAdminUrlStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "wafrAdminUrlStringSet",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "STARTS_WITH",
            "TargetString": "/admin",
            "TextTransformation": "URL_DECODE"
          }
        ]
      }
    },
    "wafrAdminRemoteAddrIpSet": {
      "Type": "AWS::WAFRegional::IPSet",
      "Properties": {
        "Name": "wafrAdminRemoteAddrIpSet",
        "IPSetDescriptors": [
          {
            "Type": "IPV4",
            "Value": "127.0.0.1/32"
          }
        ]
      }
    },
    "wafrAdminAccessRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": "wafrAdminAccessRule",
        "Name": "wafrAdminAccessRule",
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": {  "Ref" : "wafrAdminUrlStringSet" }
          },
          {
            "Type": "IPMatch",
            "Negated": true,
            "DataId": {  "Ref" : "wafrAdminRemoteAddrIpSet" }
          }
        ]
      }
    },
    "wafrPHPInsecureQSStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "wafrPHPInsecureQSStringSet",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "_SERVER[",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "_ENV[",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "auto_prepend_file=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "auto_append_file=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "allow_url_include=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "disable_functions=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "open_basedir=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "safe_mode=",
            "TextTransformation": "URL_DECODE"
          }
        ]
      }
    },
    "wafrPHPInsecureURIStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "wafrPHPInsecureURIStringSet",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": "php",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": "/",
            "TextTransformation": "URL_DECODE"
          }
        ]
      }
    },
    "wafrPHPInsecureRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": "wafrPHPInsecureRule",
        "Name": "wafrPHPInsecureRule",
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": {  "Ref" : "wafrPHPInsecureQSStringSet" }
          },
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": {  "Ref" : "wafrPHPInsecureURIStringSet" }
          }
        ]
      }
    },
    "wafrSizeRestrictionSet": {
      "Type": "AWS::WAFRegional::SizeConstraintSet",
      "Properties": {
        "Name": "wafrSizeRestrictionSet",
        "SizeConstraints": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": "512"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": "1024"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": "2000000"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": "4093"
          }
        ]
      }
    },
    "wafrSizeRestrictionRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": "wafrSizeRestrictionRule",
        "Name": "wafrSizeRestrictionRule",
        "Predicates": [
          {
            "Type": "SizeConstraint",
            "Negated": false,
            "DataId": {  "Ref" : "wafrSizeRestrictionSet" }
          }
        ]
      }
    },
    "wafrCSRFRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "Name": "wafrCSRFRule"
      }
       },
    "wafrServerSideIncludeStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": "wafrServerSideIncludeStringSet",
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "STARTS_WITH",
            "TargetString": "/includes",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".cfg",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".conf",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".config",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".ini",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".log",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".bak",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".backup",
            "TextTransformation": "LOWERCASE"
          }
        ]
      }
    },
    "wafrServerSideIncludeRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": "wafrServerSideIncludeRule",
        "Name": "wafrServerSideIncludeRule",
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": {  "Ref" : "wafrServerSideIncludeStringSet" }
          }
        ]
      }
    },
    "wafrBlacklistIpSet": {
      "Type": "AWS::WAFRegional::IPSet",
      "Properties": {
        "Name": "wafrBlacklistIpSet",
        "IPSetDescriptors": [
          {
            "Type": "IPV4",
            "Value": "10.0.0.0/8"
          },
          {
            "Type": "IPV4",
            "Value": "192.168.0.0/16"
          },
          {
            "Type": "IPV4",
            "Value": "169.254.0.0/16"
          },
          {
            "Type": "IPV4",
            "Value": "172.16.0.0/16"
          },
          {
            "Type": "IPV4",
            "Value": "127.0.0.1/32"
          }
        ]
      }
    },
    "wafrBlacklistIpRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": "wafrBlacklistIpRule",
        "Name": "wafrBlacklistIpRule",
        "Predicates": [
          {
            "Type": "IPMatch",
            "Negated": false,
            "DataId": {  "Ref" : "wafrBlacklistIpSet" }
          }
        ]
      }
    },
    "wafrOwaspACL": {
      "Type": "AWS::WAFRegional::WebACL",
      "Properties": {
        "MetricName": "wafrOwaspACL",
        "Name": "wafrOwaspACL",
        "DefaultAction": {
          "Type": "ALLOW"
        },
        "Rules": [
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 10,
            "RuleId": {  "Ref" : "wafrSizeRestrictionRule" }
          },
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 20,
            "RuleId": {  "Ref" : "wafrBlacklistIpRule" }
          },
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 30,
            "RuleId": {  "Ref" : "wafrAuthTokenRule" }
          },
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 40,
            "RuleId": {  "Ref" : "wafrSQLiRule" }
          },
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 50,
            "RuleId": {  "Ref" : "wafrXSSRule" }
          },
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 60,
            "RuleId": {  "Ref" : "wafrPathsRule" }
          },
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 70,
            "RuleId": {  "Ref" : "wafrPHPInsecureRule" }
          },
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 80,
            "RuleId": {  "Ref" : "wafrCSRFRule" }
          },
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 90,
            "RuleId": {  "Ref" : "wafrServerSideIncludeRule" }
          },
          {
            "Action": {
              "Type": {  "Ref" : "ruleAction" }
            },
            "Priority": 100,
            "RuleId": {  "Ref" : "wafrAdminAccessRule" }
          }
        ]
      }
    },
    "ACLAssociation": {
      "Type": "AWS::WAFRegional::WebACLAssociation",
      "Properties": {
        "ResourceArn": { "Ref": "myApplicationLoadBalencer" },
        "WebACLId": { "Ref": "wafrOwaspACL" }
      }
    },
    "EC2ServiceRole": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ],
        "InstanceProfileName": "EC2ServiceRole"
      }
    },
    "AutoScalingLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdm",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": "20",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "IamInstanceProfile": { "Ref": "EC2ServiceRole" },
        "ImageId": {
          "Ref": "imageId"
        },
        "InstanceMonitoring": false,
        "InstanceType": "t2.micro",
        "KeyName": "csye6225",
        "SecurityGroups": [{ "Fn::GetAtt": ["csye6225webapp", "GroupId"] }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "sudo yum update -y",
                "sudo yum install ruby -y",
                "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
                "chmod +x ./install",
                "sudo ./install auto",
                "sudo service codedeploy-agent start",
                "cd /etc/profile.d/",
                "sudo touch webappEnv.sh",
                "sudo chmod 777 webappEnv.sh",
                "echo '#!/bin/bash' >> webappEnv.sh",
                {
                  "Fn::Sub": [
                    "echo export DB_NAME=${DatabaseName} >> webappEnv.sh",
                    {
                      "DatabaseName": {
                        "Ref": "DBName"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "echo export USER_NAME=${DatabaseUser} >> webappEnv.sh",
                    {
                      "DatabaseUser": {
                        "Ref": "DBUser"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "echo export PASS=${DatabasePass} >> webappEnv.sh",
                    {
                      "DatabasePass": {
                        "Ref": "DBPassword"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "echo export DB_HOST=${DatabaseHost} >> webappEnv.sh",
                    {
                      "DatabaseHost": {
                        "Fn::GetAtt": [
                          "myRDSInstance",
                          "Endpoint.Address"
                        ]
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "echo export PORT=${ApplicationPort} >> webappEnv.sh",
                    {
                      "ApplicationPort": {
                        "Ref": "Appport"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "echo export S3BUCKET=${S3BUCKET} >> webappEnv.sh",
                    {
                      "S3BUCKET": {
                        "Ref": "myS3Bucket"
                      }
                    }
                  ]
                },
                "echo export NODE_ENV=dev >> webappEnv.sh",
                "sudo groupadd nodeUser",
                "sudo useradd -M -s /bin/nologin -g nodeUser -d /webapp nodeUser",
                "cd /etc/systemd/system/",
                "sudo touch nodeserver.service",
                "sudo chmod 777 nodeserver.service",
                "sudo echo '[Unit]' > nodeserver.service",
                "sudo echo 'Description=Node.js Http Server for csye6225' >> nodeserver.service",
                "sudo echo 'After=syslog.target network.target' >> nodeserver.service",
                "sudo echo [Service] >> nodeserver.service",
                "sudo echo Type=simple >> nodeserver.service",
                "sudo echo WorkingDirectory=/webapp/bin >> nodeserver.service",
                "sudo echo User=nodeUser >> nodeserver.service",
                "sudo echo RestartSec=10 >> nodeserver.service",
                "sudo echo Restart=on-failure >> nodeserver.service",
                {
                  "Fn::Sub": [
                    "sudo echo Environment=PORT=${ApplicationPort} >> nodeserver.service",
                    {
                      "ApplicationPort": {
                        "Ref": "Appport"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "sudo echo Environment=DB_NAME=${DatabaseName} >> nodeserver.service",
                    {
                      "DatabaseName": {
                        "Ref": "DBName"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "sudo echo Environment=USER_NAME=${DatabaseUser} >> nodeserver.service",
                    {
                      "DatabaseUser": {
                        "Ref": "DBUser"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "sudo echo Environment=PASS=${DatabasePass} >> nodeserver.service",
                    {
                      "DatabasePass": {
                        "Ref": "DBPassword"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "sudo echo Environment=DB_HOST=${DatabaseHost} >> nodeserver.service",
                    {
                      "DatabaseHost": {
                        "Fn::GetAtt": [
                          "myRDSInstance",
                          "Endpoint.Address"
                        ]
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "sudo echo Environment=S3BUCKET=${S3BUCKET} >> nodeserver.service",
                    {
                      "S3BUCKET": {
                        "Ref": "myS3Bucket"
                      }
                    }
                  ]
                },
                "sudo echo 'ExecStart=/usr/bin/node www' >> nodeserver.service",
                "sudo echo '[Install]' >> nodeserver.service",
                "sudo echo 'WantedBy=multi-user.target' >> nodeserver.service",
                "sudo systemctl daemon-reload",
                "sudo systemctl enable nodeserver.service"
              ]
            ]
          }
        }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "Cooldown": "60",
        "LaunchConfigurationName": { "Ref": "AutoScalingLaunchConfig" },
        "MaxSize": "10",
        "MinSize": "3",
        "DesiredCapacity": "3",
        "TargetGroupARNs":[
          {
            "Ref": "ALBTargetGroup"
          }
        ],
        "Tags": [
          {
            "Key": { "Ref": "EC2TagKey" },
            "Value": { "Ref": "EC2TagValue" },
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": [{ "Ref": "privateSubnetId1" }, { "Ref": "privateSubnetId2" }]
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "AutoScalingGroup" },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "AutoScalingGroup" },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "1",
        "Threshold": "10",
        "AlarmActions": [{ "Ref": "WebServerScaleUpPolicy" }],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "5",
        "AlarmActions": [{ "Ref": "WebServerScaleDownPolicy" }],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "myApplicationLoadBalencer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name" : "ApplicationLoadBalancer",
        "Type" : "application",
        "Scheme" : "internet-facing",
        "Subnets": [{ "Ref": "privateSubnetId1" }, { "Ref": "privateSubnetId2" }],
        "SecurityGroups": [{ "Ref": "securityGroupELB" }]
      }
    },
    "LoadBalencerListner": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates" : [
          {
            "CertificateArn" : {"Ref" : "SSLCertificateArn"}
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ALBTargetGroup" }
          }
        ],
        "LoadBalancerArn": { "Ref": "myApplicationLoadBalencer" },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    },
    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 3,
        "Port": 3000,
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 3,
        "VpcId": { "Ref": "vpcId" },
        "Name": "TargetGrpLB",
        "HealthCheckPort": 3000
      }
    },
    "securityGroupELB": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "security-group-elb",
        "GroupDescription": "Security Group for Load Balancer",
        "VpcId": { "Ref": "vpcId" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "csye6225webapp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "csye6225-webapp",
        "GroupDescription": "Security Group for Web Services",
        "VpcId": {
          "Ref": "vpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3000,
            "ToPort": 3000,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "csye6225rds": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "csye6225-rds",
        "GroupDescription": "Security Group for DB Service",
        "VpcId": {
          "Ref": "vpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": {
              "Ref": "DBport"
            },
            "ToPort": {
              "Ref": "DBport"
            },
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "csye6225webapp",
                "GroupId"
              ]
            }
          }
        ]
      }
    },
    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Database subnet group for RDS instance",
        "DBSubnetGroupName": "Subnet for RDS instances",
        "SubnetIds": [
          {
            "Ref": "privateSubnetId1"
          },
          {
            "Ref": "privateSubnetId2"
          }
        ]
      }
    },
    "myRDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "Engine": "MySQL",
        "DBInstanceClass": "db.t2.medium",
        "MultiAZ": "false",
        "DBInstanceIdentifier": {
          "Ref": "DBInstanceIdentifier"
        },
        "MasterUsername": {
          "Ref": "DBUser"
        },
        "MasterUserPassword": {
          "Ref": "DBPassword"
        },
        "DBSubnetGroupName": "Subnet for RDS instances",
        "PubliclyAccessible": "false",
        "DBName": {
          "Ref": "DBName"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "csye6225rds"
          }
        ],
        "AllocatedStorage": "100"
      }
    },
    "myDynamoDB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "TableName": "csye6225",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        }
      }
    },
    "myS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DomainName"
              },
              "csye6225.com"
            ]
          ]
        }
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "CodeDeployServiceRole",
        "ManagedPolicyArns": [
          {
            "Ref": "AWSCodeDeployRoleARN"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "CodeDeployEC2ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "CodeDeployEC2ServiceRole",
        "ManagedPolicyArns": [
          {
            "Ref": "CloudWatchAgentServerPolicyARN"
          },
          {
            "Ref": "AmazonSNSFullAccess"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "CircleCICodeDeploy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "CircleCI-Code-Deploy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:GetApplicationRevision"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "AWSREGION"
                      },
                      ":",
                      {
                        "Ref": "AWSACCOUNTID"
                      },
                      ":application:",
                      {
                        "Ref": "ApplicationName"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:GetDeploymentConfig"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "AWSREGION"
                      },
                      ":",
                      {
                        "Ref": "AWSACCOUNTID"
                      },
                      ":deploymentconfig:CodeDeployDefault.OneAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "AWSREGION"
                      },
                      ":",
                      {
                        "Ref": "AWSACCOUNTID"
                      },
                      ":deploymentconfig:CodeDeployDefault.HalfAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "AWSREGION"
                      },
                      ":",
                      {
                        "Ref": "AWSACCOUNTID"
                      },
                      ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Users": [
          "circleci"
        ],
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "CodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "csye6225-webapp",
        "ComputePlatform": "Server"
      }
    },
    "CodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": "csye6225-webapp",
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE"
          ]
        },
        "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
        "DeploymentGroupName": "csye6225-webapp-deployment",
        "DeploymentStyle": {
          "DeploymentType": "IN_PLACE",
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
        },
        "Ec2TagFilters": [
          {
            "Key": {
              "Ref": "EC2TagKey"
            },
            "Value": {
              "Ref": "EC2TagValue"
            },
            "Type": "KEY_AND_VALUE"
          }
        ],
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    },
    "CodeDeployEC2S3": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "CodeDeploy-EC2-S3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*",
                "s3:Put*",
                "s3:Delete*"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "CircleCIUploadToS3": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "CircleCI-Upload-To-S3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "Users": [
          "circleci"
        ],
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "AWSLambdaExecute": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "AWSLambdaExecute3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:UpdateFunctionCode"
              ],
              "Resource": "*"
            }
          ]
        },
        "Users": [
          "circleci"
        ],
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "PasswordResetSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "password_reset",
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "LambdaEmailApplication",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          }
        ]
      }
    },
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "PasswordResetSNSTopic"
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaEmailApplication",
            "Arn"
          ]
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonRoute53ReadOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSESFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        ]
      }
    },
    "LambdaEmailApplication": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "  var responseData = 5;",
                "  response.send(event, context, response.SUCCESS, responseData);",
                "};"
              ]
            ]
          }
        },
        "Description": "A lambda function for reset password email service",
        "FunctionName": {
          "Ref": "LambdaFuntionName"
        },
        "Handler": {
          "Ref": "LambdaFuntionHandlerName"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Ref": "LambdaFuntionRuntime"
        },
        "Timeout": 10
      }
    },
    "Route53RecordSetGroup" : {
      "Type" : "AWS::Route53::RecordSetGroup",
      "Properties" : {
        "HostedZoneName" : {
          "Ref": "DomainName"
        },
        "Comment" : "Zone apex alias targeted to Application Load Balancer.",
        "RecordSets" : [
          {
            "Name" : {
              "Ref": "DomainName"
            },
            "Type" : "A",
            "AliasTarget" : {
              "HostedZoneId" : { "Fn::GetAtt" : ["myApplicationLoadBalencer", "CanonicalHostedZoneID"] },
              "DNSName" : { "Fn::GetAtt" : ["myApplicationLoadBalencer", "DNSName"] }
            }
          }
        ]
      }
    }
  },
  "Parameters": {
    "ruleAction": {
      "Type": "String",
      "Description": "The type of action you want to iplement for the rules in this set. Valid options are COUNT or BLOCK.",
      "AllowedValues": [
        "BLOCK",
        "COUNT"
      ],
      "Default": "BLOCK"
    },
    "imageId": {
      "Type": "String",
      "Default": "default-image-id"
    },
    "publicSubnetId1": {
      "Type": "String",
      "Default": "default-subnet-id"
    },
    "privateSubnetId1": {
      "Type": "String",
      "Default": "default-subnet-id"
    },
    "privateSubnetId2": {
      "Type": "String",
      "Default": "default-subnet-id"
    },
    "vpcId": {
      "Type": "String",
      "Default": "default-vpc-id"
    },
    "DBport": {
      "Type": "Number",
      "Default": "3306"
    },
    "DBUser": {
      "Type": "String",
      "Default": "csye6225master"
    },
    "DBPassword": {
      "Type": "String",
      "Default": "csye6225password"
    },
    "DBInstanceIdentifier": {
      "Type": "String",
      "Default": "csye6225-spring2019"
    },
    "DBName": {
      "Type": "String",
      "Default": "csye6225"
    },
    "DomainName": {
      "Type": "String",
      "Default": "csye6225-spring2019-default.me."
    },
    "EC2TagKey" : {
      "Type" : "String",
      "Default" : "EC2-Tag-Key"
    },
    "EC2TagValue" : {
      "Type" : "String",
      "Default" : "EC2-Tag-Value"
    },
    "AWSCodeDeployRoleARN": {
      "Type": "String",
      "Default": "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
    },
    "CloudWatchAgentServerPolicyARN": {
      "Type": "String",
      "Default": "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
    },
    "AmazonSNSFullAccess": {
      "Type": "String",
      "Default": "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
    },
    "Appport" : {
      "Type" : "Number",
      "Default" : "3000"
    },
    "AWSREGION": {
      "Type": "String",
      "Default": "us-east-1"
    },
    "AWSACCOUNTID": {
      "Type": "String",
      "Default": "273656506688"
    },
    "ApplicationName": {
      "Type": "String",
      "Default": "csye6225-webapp"
    },
    "S3AppZipKey": {
      "Type": "String",
      "Default": "csye6225-reset-email-service.zip"
    },
    "LambdaFuntionName": {
      "Type": "String",
      "Default": "default-name"
    },
    "LambdaFuntionHandlerName": {
      "Type": "String",
      "Default": "default-handler"
    },
    "LambdaFuntionRuntime": {
      "Type": "String",
      "Default": "default-runtime"
    },
    "SSLCertificateArn" : {
      "Default": " ",
      "Description": "The Amazon Resource Name (ARN) of the certificate to associate with the listener.",
      "Type": "String"
    }
  }
}

